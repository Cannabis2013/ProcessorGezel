dp PC(in pc_in : ns(32);out pc_out : ns(32))
{
        reg a : ns(32);
        a = pc_in;
        always{
                pc_out = a + 1;
                }
}

dp adder(in A, B : tc(32); out R : tc(32)){

        always {
                R = A + B;
        }
}

dp multiplexer(in A, B : tc(32);
                in S : ns(2);
                out R : tc(32)){

	sig C : tc(32);
	sig D : tc(32);
        sig E : tc(32);

	use adder(C,D,E);


        sfg run {
		C = (S == 0) ? A : (S == 1) ? B : 0;
		D = (S == 0) ? -B : (S == 1) ? -A : 0;
		R = (S == 0) ? E : (S == 1) ? E : (S == 2) ? A : B;
        }
}



hardwired ctrl(multiplexer){run;}

dp doOperations{
	sig A : tc(32);
	sig B : tc(32);
	sig S : ns(2);
	sig R : tc(32);
        sig P : ns(32);
        sig O : ns(32);

        use PC(O,P);

	use multiplexer(A,B,S,R);
	always
	{
                $display($dec,"Cycle:",$cycle, ", A=",A, ",B=", B,",S=",S,",R=", R,", P=",P);
                O = P;
	}
	sfg run_1
	{
		A = 3;
		B = 4;
		S = 3;	
	}
	sfg run_2
	{
		A = 3;
		B = 4;
		S = 0;	
	}


	sfg run_3
	{
		A = 5;
		B=  8;
		S = 2;
	}
	sfg run_4
	{
		A = 5;
		B= 8;
		S = 3;
	}
	sfg run_5
	{
		A = 5;
		B= 8;
		S = 1;
	}
}

fsm controller(doOperations)
{
	initial s0;
	state s1,s2,s3,s4;
	@s0(run_1) -> s1;
	@s1(run_2) -> s2;
	@s2(run_3) -> s3;
	@s3(run_4) -> s4;
	@s4(run_5) -> s0;
}

system PCsystem{
        doOperations;
}
