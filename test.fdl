dp PC(in jumpto : ns(32);in reset, jump, incr : ns(1);out pc_out : ns(32))
{
	reg a : ns(32);
    always
    {
    	a = reset ? -1 : jump ? jumpto : incr ? a + 1 : a;
    	pc_out =  a;
	}
}


dp register(in aSel, bSel : ns(3);in write : ns(1); in valAdress : ns(3);in storeVal : tc(32); out A,B : tc(32))
{
	reg a0,a1,a2,a3,a4,a5,a6,a7 : tc(32);
	sfg run
	{
		a0 = 0;
		A = (aSel == 1) ? a1 :
			(aSel == 2) ? a2 :
			(aSel == 3) ? a3 :
			(aSel == 4) ? a4 :
			(aSel == 5) ? a5 :
			(aSel == 6) ? a6 :
			(aSel == 7) ? a7 : a0;
		B = (bSel == 1) ? a1 :
			(bSel == 2) ? a2 :
			(bSel == 3) ? a3 :
			(bSel == 4) ? a4 :
			(bSel == 5) ? a5 :
			(bSel == 6) ? a6 :
			(bSel == 7) ? a7 : a0;
		
		a1 = write ? (valAdress == 1) ? storeVal : a1 : a1;
		a2 = write ? (valAdress == 2) ? storeVal : a2 : a2;
		a3 = write ? (valAdress == 3) ? storeVal : a3 : a3;
		a4 = write ? (valAdress == 4) ? storeVal : a4 : a4;
		a5 = write ? (valAdress == 5) ? storeVal : a5 : a5;
		a6 = write ? (valAdress == 6) ? storeVal : a6 : a6;
		a7 = write ? (valAdress == 7) ? storeVal : a7 : a7;
	}
}
hardwired ctrl(register){run;}

ipblock instmem(in adress : ns(5);in wr,rd : ns(1);in idata : ns(32);out odata : ns(32))
{
	iptype "ram";
	ipparm "size=64";
	ipparm "wl=32";
	ipparm "file=program.txt";
}

dp iMemmory(in adress : ns(5);out instruction : ns(32))
{
	sig wr : ns(1);
	sig rd : ns(1);
	sig idata : ns(32);
	sig odata : ns(32);
	
	use instmem(adress,wr,rd,idata,odata);
	always
	{
		wr = 0;
		rd = 1;
		idata = 0;
		instruction = odata;
	}
}

dp multiplexer(in A, B : tc(32);
                in select : ns(2);
                out result : tc(32)){

	sig C : tc(32);
	sig D : tc(32);


	sfg run 
	{
		C = (select == 0) ? A : (select == 1) ? B : 0;
		D = (select == 0) ? B : (select == 1) ? A : 0;
		result = (select == 0) ? C + D : (select == 1) ? C + D : (select == 2) ? A : B;
		
    }
}

hardwired ctrl(multiplexer){run;}

dp ALU(in A, B : tc(32);
                in S : ns(2);
                out N,Z : ns(1);
                out result : tc(32))
{
	sig R : tc(32);
	use multiplexer(A,B,S,R);
	
	sfg run
	{
		result = R;
		Z = (R == 0) ? 1 : 0;
		N = (R < 0) ? 1 : 0;
	}
}
hardwired ctrl(ALU){run;}

dp doOperations{
	sig A : tc(32);
	sig B : tc(32);
	sig S : ns(2);
	sig R : tc(32);
  	sig P : ns(32);
  	sig N : ns(1);
  	sig Z : ns(1);
  	sig m_reset : ns(1);
  	sig m_jump : ns(1);
  	sig m_jmpto : ns(32);
  	reg initialized : ns(1);
  	sig incr : ns(1);
  	

  	use PC(m_jmpto,m_reset,m_jump,incr,P);
	use ALU(A,B,S,N,Z,R);
	
	sfg disp
	{
    	$display($dec,"Cycle:",$cycle, ", A=",A, ",B=", B,",S=",S,",R=", R,", reset=",m_reset,", jump=",m_jump,", P=",P, ", Z=",Z);
    	
	}
	
	sfg init
	{
		m_reset = 0;
		m_jump = 0;
		m_jmpto = 0;
		incr = 0;
		A = 0;
		B = 0;
		S = 0;
		initialized = 1;
	}
	
	sfg run_1 // A - B
	{
		A = 3;
		B = -4;
		S = 0;
		m_reset = 0;
		m_jump = 0;
		incr = 0;
	}
	sfg run_2 // B - A
	{
		A = -3;
		B = 4;
		S = 1;
		m_reset = 0;
		m_jump = 0;
		incr = 1;
	}

	sfg run_3 // A
	{
		A = 5;
		B=  8;
		S = 2;
		m_reset = 0;
		m_jump = 0;
		incr = 1;
	}
	sfg run_4 // B
	{
		A = 5;
		B= 8;
		S = 3;
		m_reset = 0;
		m_jump = 0;
		incr = 0;
	}
	sfg run_5
	{
		A = 5;
		B= 8;
		S = 3;
		m_reset = 0;
		m_jump = 1;
		m_jmpto = 10;
		incr = 0;
	}
	
	sfg run_6 // A - B
	{
		A = 3;
		B = -4;
		S = 0;
		m_reset = 0;
		m_jump = 0;
		incr = 0;
	}
}

fsm controller(doOperations)
{
	initial s0;
	state s1,s2,s3,s4,s5;
	@s0 if(initialized) 
		then (run_1,disp) -> s1;
		else (init) -> s0;
	@s1(run_2,disp) -> s2;
	@s2(run_3,disp) -> s3;
	@s3(run_4,disp) -> s4;
	@s4(run_5,disp) -> s5;
	@s5(run_6,disp) -> s0;
}

system PCsystem{
    doOperations;
}
