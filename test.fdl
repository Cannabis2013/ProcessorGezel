dp PC(in pc_in, pc_jmp : ns(32);in r, j : ns(1);out pc_out : ns(32))
{
        reg a : tc(32);
        sfg run
        {
        	a = r ?  -1 : j ? pc_jmp : pc_in;
        	pc_out = a + 1;
    	}
}

hardwired ctrl(PC){run;}

dp adder(in A, B : tc(32); out R : tc(32)){

        sfg run 
        {
        	R = A + B;
        }
}

hardwired ctrl(adder){run;}

dp multiplexer(in A, B : tc(32);
                in S : ns(2);
                out R : tc(32)){

	sig C : tc(32);
	sig D : tc(32);
	sig E : tc(32);

	use adder(C,D,E);


	sfg run 
	{
		C = (S == 0) ? A : (S == 1) ? B : 0;
		D = (S == 0) ? -B : (S == 1) ? -A : 0;
		R = (S == 0) ? E : (S == 1) ? E : (S == 2) ? A : B;
    }
}


hardwired ctrl(multiplexer){run;}

dp doOperations{
	sig A : tc(32);
	sig B : tc(32);
	sig S : ns(2);
	sig R : tc(32);
    sig P : ns(32);
    sig O : tc(32);
    sig reset : ns(1);
    sig jump : ns(1);
    sig jmpto : ns(32);
    reg initialized : ns(1);

    use PC(O,jmpto,reset,jump,P);
	
	use multiplexer(A,B,S,R);
	sfg disp
	{
        $display($dec,"Cycle:",$cycle, ", A=",A, ",B=", B,",S=",S,",R=", R,", reset=",reset,", jump=",jump,", P=",P);
	}
	
	sfg init
	{
		O = -1;
		reset = 0;
		jump = 0;
		jmpto = 0;
		A = 0;
		B = 0;
		S = 0;
		initialized = 1;
	}
	
	sfg run_1
	{
		A = 3;
		B = 4;
		S = 0;
		reset = 0;
		jump = 0;
		O = P;
	}
	sfg run_2
	{
		A = 3;
		B = 4;
		S = 1;
		reset = 0;
		jump = 0;
		O = P;
	}


	sfg run_3
	{
		A = 5;
		B=  8;
		S = 2;
		reset = 0;
		jump = 0;
		O = P;
	}
	sfg run_4
	{
		A = 5;
		B= 8;
		S = 3;
		reset = 0;
		jump = 0;
		O = P;
	}
	sfg run_5
	{
		A = 5;
		B= 8;
		S = 3;
		reset = 1;
		jump = 0;
		jmpto = 0;
		O = P;
	}
}

fsm controller(doOperations)
{
	initial s0;
	state s1,s2,s3,s4;
	@s0 if(initialized) 
		then (run_1,disp) -> s1;
		else (init) -> s0;
	@s1(run_2,disp) -> s2;
	@s2(run_3,disp) -> s3;
	@s3(run_4,disp) -> s4;
	@s4(run_5,disp) -> s0;
}

system PCsystem{
    doOperations;
}
