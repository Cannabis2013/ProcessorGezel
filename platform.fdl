

$option "vcd"


dp PC(in jump, incr : ns(1);in jumpto : ns(5);out pc_out : ns(5))
{
	reg a : ns(5);
    always
    {
    	a = jump ? jumpto : (incr ? a + 1 : a);
    	pc_out =a;
	}
}

dp register(in aSel, bSel : ns(3);in write : ns(1); in valAdress : ns(3);in storeVal : tc(32); out A,B : tc(32))
{
	reg a0,a1,a2,a3,a4,a5,a6,a7 : tc(32);
	always
	{
		a0 = 0;
		A = (aSel == 1) ? a1 :
			(aSel == 2) ? a2 :
			(aSel == 3) ? a3 :
			(aSel == 4) ? a4 :
			(aSel == 5) ? a5 :
			(aSel == 6) ? a6 :
			(aSel == 7) ? a7 : a0;
		B = (bSel == 1) ? a1 :
			(bSel == 2) ? a2 :
			(bSel == 3) ? a3 :
			(bSel == 4) ? a4 :
			(bSel == 5) ? a5 :
			(bSel == 6) ? a6 :
			(bSel == 7) ? a7 : a0;
		
		a1 = write ? (valAdress == 1) ? storeVal : a1 : a1;
		a2 = write ? (valAdress == 2) ? storeVal : a2 : a2;
		a3 = write ? (valAdress == 3) ? storeVal : a3 : a3;
		a4 = write ? (valAdress == 4) ? storeVal : a4 : a4;
		a5 = write ? (valAdress == 5) ? storeVal : a5 : a5;
		a6 = write ? (valAdress == 6) ? storeVal : a6 : a6;
		a7 = write ? (valAdress == 7) ? storeVal : a7 : a7;
		
		//$display($dec,"Cycle:",$cycle, ", a1 = ",a1, ", a2 = ", a2, ", a3 = ", a3, ", a4 = ", a4, ", a5 = ", a5, ", a6 = ", a6, ", a7 = ", a7 );
	}
}

ipblock instmem(in adress : ns(5);in wr,rd : ns(1);in idata : ns(16);out odata : ns(16))
{
	iptype "ram";
	ipparm "size=64";
	ipparm "wl=16";
	ipparm "file=program.txt";
}

dp instructionregister(in adress : ns(5);out instruction : ns(16))
{
	sig wr : ns(1);
	sig rd : ns(1);
	sig idata : ns(16);
	sig odata : ns(16);
	
	use instmem(adress,wr,rd,idata,odata);
	always
	{
		wr = 0;
		rd = 1;
		idata = 0;
		instruction = odata;
	}
}

dp multiplexer(in A, B : tc(32);
                in select : ns(2);
                out result : tc(32)){

	sig C : tc(32);
	sig D : tc(32);

	always 
	{
		C = (select == 0) ? A : (select == 1) ? B : 0;
		D = (select == 0) ? B : (select == 1) ? A : 0;
		result = (select == 0) ? C + D : (select == 1) ? C + D : (select == 2) ? A : B;
		
    }
}


dp ALU(in A, B : tc(32);
                in S : ns(2);
                out N,Z : ns(1);
                out result : tc(32))
{
	sig R : tc(32);
	use multiplexer(A,B,S,R);
	
	always
	{
		result = R;
		Z = (R == 0) ? 1 : 0;
		N = (R < 0) ? 1 : 0;
	}
}

dp processor(in s_a_select : ns(3);
	in s_b_select : ns(3);
	in s_write : ns(1);
	in s_wr_adrs : ns(3);
	in s_wr_val : tc(32);
	out register_out_a : tc(32);
	out register_out_b : tc(32);
	in s_alu_a : tc(32);
	in s_alu_b : tc(32);
	in c_select : ns(2);
	out s_result : tc(32);
  	out s_negative : ns(1);
  	out s_zero : ns(1))
{
	sig alu_out: tc(32);
	sig alu_negative_out : ns(1);
	sig alu_zero_out: ns(1);
	
	
  	use register(s_a_select,s_b_select,s_write,s_wr_adrs,s_wr_val,register_out_a,register_out_b);
	use ALU(s_alu_a,s_alu_b,c_select,alu_negative_out,alu_zero_out,alu_out);
	
	always
	{		
		s_result = alu_out;
  		s_negative = alu_negative_out;
  		s_zero = alu_zero_out;
	}
}


dp CPU(out M_datain : ns(32);
       out M_cmd : ns(32);
       out M_datainrdy : ns(1);
       in M_dataout : ns(32);
       in M_dataoutrdy : ns(1))
{

	// PC signals
	sig m_jumpto : ns(5);
	sig c_jump : ns(1);
	sig c_incr : ns(1);
	sig m_index : ns(5);
	sig old_index : ns(5);
	
	
	// Instruction memory signals and registers
	sig m_instr_opt : ns(16);
	reg rm : ns(8);
	reg rn : ns(4);
	reg m_opt_id : ns(4);
	
	
	// Registerfile signals
	sig s_a_select : ns(3);
	sig m_b_select : ns(3);
	sig m_write : ns(1);
	sig m_wr_adrs : ns(3);
	sig m_wr_val : tc(32);
	sig reg_val_a : tc(32);
	sig reg_val_b : tc(32);
	
	// ALU signals
	sig m_alu_a : tc(32);
	sig m_alu_b : tc(32);
	sig c_select : ns(2);
	sig m_result : tc(32);
	sig N : ns(1);
  	sig Z : ns(1);
  	
  	
  	// From bus
  	
  	reg M_bus_rdy : ns(1);
  	reg M_data : ns(32);
  	
	use PC(c_jump,c_incr,m_jumpto,m_index);
	use instructionregister(m_index,m_instr_opt);
	use processor(s_a_select,m_b_select,m_write,m_wr_adrs,m_wr_val,reg_val_a,reg_val_b,m_alu_a,m_alu_b,c_select,m_result,N,Z);
	
	always
	{	
		old_index = m_index - 1;
	}
	
	sfg DISP
	{
		$display($dec,"Cycle:",$cycle, ": PC_index = ",old_index, ", incr = ", c_incr, ", opt = ",m_opt_id, ", rn = ", rn, ", rm = ", rm,", data from bus = ", M_data, ", m_result = ", m_result);
	}
	
	sfg FETCH // Fetch next instruction and increment PC index
	{
		m_opt_id = m_instr_opt >> 12;
		rn = m_instr_opt >> 8;
		rm = m_instr_opt;
		
		m_jumpto = 0;
		
		c_jump = 0;
		c_incr = 1;
		
		c_select = 0;
		s_a_select = 0;
		m_b_select = 0;
		m_write = 0;
		m_wr_adrs = 0;
		m_wr_val = 0;
		m_alu_a = 0;
		m_alu_b = 0;
		
		M_datain = 0;
		M_datainrdy = 0;
		M_cmd = 0;
		M_data = 0;
	}
	
	sfg SKIP // SKIP cycle to flush wrong instruction due to JUMPS
	{
		
		m_jumpto = 0;
		
		c_jump = 0;
		c_incr = 0;
		
		c_select = 0;
		s_a_select = 0;
		m_b_select = 0;
		m_write = 0;
		m_wr_adrs = 0;
		m_wr_val = 0;
		m_alu_a = 0;
		m_alu_b = 0;
		
		M_datain = 0;
		M_datainrdy = 0;
		M_cmd = 0;
		M_data = 0;
	}
	
	sfg WAIT_REQ // Wait for master bus
	{
		m_jumpto = 0;
		
		c_jump = 0;
		c_incr = 0;
		
		c_select = 0;
		s_a_select = 3;
		m_b_select = 0;
		m_write = 0;
		m_wr_adrs = 0;
		m_wr_val = 0;
		m_alu_a = 0;
		m_alu_b = 0;
		
		M_datain = reg_val_a;
		M_datainrdy = M_dataoutrdy ? 0 : 1;
		M_cmd = 536870912;
		
		M_data = M_dataoutrdy ? M_dataout : 0;
		M_bus_rdy = M_dataoutrdy;
	}
	
	sfg WAIT_OUT // Wait for master bus
	{
		m_jumpto = 0;
		
		c_jump = 0;
		c_incr = 0;
		
		c_select = 0;
		s_a_select = rn;
		m_b_select = 0;
		m_write = 0;
		m_wr_adrs = 0;
		m_wr_val = 0;
		m_alu_a = 0;
		m_alu_b = 0;
		
		M_datain = reg_val_a;
		M_datainrdy = M_dataoutrdy ? 0 : 1;
		M_cmd = 536870912;
		
		M_data = M_dataoutrdy ? M_dataout : 0;
		M_bus_rdy = M_dataoutrdy;
	}
	
	sfg MOVa
	{
		m_jumpto = 0;
		
		c_jump = 0;
		c_incr = 0;
		
		c_select = 0;
		s_a_select = 0;
		m_b_select = 0;
		m_write = 1;
		m_wr_adrs = rn;
		m_wr_val = rm;
		m_alu_a = 0;
		m_alu_b = 0;
		
		M_datain = 0;
		M_datainrdy = 0;
		M_cmd = 0;
		
		
	}
	sfg MOVb
	{
		m_jumpto = 0;
		
		c_jump = 0;
		c_incr = 0;
		
		c_select = 0;
		s_a_select = rm;
		m_b_select = 0;
		m_write = 1;
		m_wr_adrs = rn;
		m_wr_val = reg_val_a;
		m_alu_a = 0;
		m_alu_b = 0;
		
		M_datain = 0;
		M_datainrdy = 0;
		M_cmd = 0;
		
		//$display($dec,"Cycle = ", $cycle, ": rn = ", rn, ", rm = ", rm, ", reg_val_a = ", reg_val_a);
	}
	sfg MOVc
	{
		m_jumpto = 0;
		
		c_jump = 0;
		c_incr = 0;
		
		c_select = 2;
		s_a_select = 3;
		m_b_select = 0;
		m_write = 1;
		m_wr_adrs = rn;
		m_wr_val = M_data;
		m_alu_a = 0;
		m_alu_b = 0;
		
		M_datain = 0;
		M_datainrdy = 0;
		M_cmd = 536870912;
		
		M_bus_rdy = 0;
		//$display($dec,"Cycle = ", $cycle, ": rn = ", rn, ", rm = ", rm,", INPUT = ",M_data);
	}
	sfg JEZ
	{
		m_jumpto = Z ? rm  : 0;
		
		c_jump = Z ? 1 : 0;
		c_incr = 0;
		
		c_select = 2;
		s_a_select = rn;
		m_b_select = 0;
		m_write = 0;
		m_wr_adrs = 0;
		m_wr_val = 0;
		m_alu_a = reg_val_a;
		m_alu_b = 0;
		
		M_datain = 0;
		M_datainrdy = 0;
		
		M_cmd = 0;
	}
	sfg ADD
	{
		m_jumpto = 0;
		
		c_jump = 0;
		c_incr = 0;
		
		c_select = 0;
		s_a_select = rn;
		m_b_select = rm;
		m_write = 1;
		m_wr_adrs = rn;
		m_wr_val = m_result;
		m_alu_a = reg_val_a;
		m_alu_b = reg_val_b;
		
		M_datain = 0;
		M_datainrdy = 0;
		
		M_cmd = 0;
		
		
	}
	sfg JLT
	{
		m_jumpto = rm;
		c_jump = N ? 1 : 0;
		c_incr = 0;
				
		c_select = 2;
		s_a_select = rn;
		m_b_select = 0;
		m_write = 0;
		m_wr_adrs = 0;
		m_wr_val = 0;
		m_alu_a = reg_val_a;
		m_alu_b = 0;
		
		M_datain = 0;
		M_datainrdy = 0;
		
		M_cmd = 0;
		
		
	}
	sfg SUBI
	{
		m_jumpto = 0;
		
		c_jump = 0;
		c_incr = 0;
		
		c_select = 0;
		s_a_select = rn;
		m_b_select = 0;
		m_write = 1;
		m_wr_adrs = rn;
		m_wr_val = m_result;
		m_alu_a = reg_val_a;
		m_alu_b = -rm;
		
		M_datain = 0;
		M_datainrdy = 0;
		M_cmd = 0;
		
		
	}
	sfg JMP
	{
		m_jumpto = rn;
		c_jump = 1;
		c_incr = 0;
		
		c_select = 0;
		s_a_select = 0;
		m_b_select = 0;
		m_write = 0;
		m_wr_adrs = 0;
		m_wr_val = 0;
		m_alu_a = 0;
		m_alu_b = 0;
		
		M_datain = 0;
		M_datainrdy = 0;
		M_cmd = 0;
	}
	sfg ADDI
	{
		m_jumpto = 0;
		
		c_jump = 0;
		c_incr = 0;
		
		c_select = 0;
		s_a_select = rn;
		m_b_select = 0;
		m_write = 1;
		m_wr_adrs = rn;
		m_wr_val = m_result;
		m_alu_a = reg_val_a;
		m_alu_b = rm;
		
		M_datain = 0;
		M_datainrdy = 0;
		M_cmd = 0;
	}
	
	sfg RET
	{
		m_jumpto = 0;
		
		c_jump = 0;
		c_incr = 0;
		
		c_select = 0;
		s_a_select = rn;
		m_b_select = 0;
		m_write = 0;
		m_wr_adrs = 0;
		m_wr_val = 0;
		m_alu_a = 0;
		m_alu_b = 0;
		
		M_datain = reg_val_a;
		M_datainrdy = 1;
		M_cmd = 0;
		
		$display($dec,"Cycle = ", $cycle, ": rn = ", rn, ", OUTPUT = ",reg_val_a);
	}
	
	sfg IDL
	{
		m_jumpto = 0;
		
		c_jump = 0;
		c_incr = 0;
		
		c_select = 0;
		s_a_select = 0;
		m_b_select = 0;
		m_write = 0;
		m_wr_adrs = 0;
		m_wr_val = 0;
		m_alu_a = 0;
		m_alu_b = 0;
		
		M_datain = 0;
		M_datainrdy = 0;
		M_cmd = 0;
	}
}

fsm controller(CPU)
{
	initial s0;
	state s1,s2,s3,s4,s5;
	@s0 (FETCH) -> s1;
	@s1 if (m_opt_id == 0) then (MOVa) -> s0;
		else if(m_opt_id == 1) then (WAIT_REQ) -> s2;
		else if(m_opt_id == 2) then (JEZ) -> s3;
		else if(m_opt_id == 3) then (ADD) -> s0;
		else if(m_opt_id == 4) then (JLT) -> s3;
		else if(m_opt_id == 5) then (MOVb) -> s0;
		else if(m_opt_id == 6) then (IDL) -> s4;
		else if(m_opt_id == 7) then (RET) -> s0;
		else if(m_opt_id == 8) then (SUBI) -> s0;
		else if(m_opt_id == 12) then (JMP) -> s3;
		else (ADDI) -> s0;
	@s2 if(M_bus_rdy) then (MOVc) -> s0;
			else (WAIT_REQ) -> s2;
	@s3 (SKIP) -> s0;
	@s4 (IDL) -> s4;
}
////////////////////////////
// Bus
////////////////////////////

dp bus(
        // CPU interface
        in reqCPU  : ns(1);
        in cmdCPU : ns(32); // What command should be executed at the unit receiving this + ID of destination unit is in 4 MSB
        in dataoutCPU : ns(32); // data from the CPU
        out ackCPU : ns(1); 
                
        out dataRdyCPU : ns(1); // high when unit has data, which is ready for the CPU
        out datainCPU : ns(32); // data to the CPU
        in waitCPU : ns(1); // Remains high until the CPU has read the data
                
        // Data Memory interface
        out reqDataMem : ns(1);
        out cmdDataMem : ns(32);
        out datainDataMem : ns(32); // data to Data memory from CPU
        in ackDataMem : ns(1);
               
        in dataRdyDataMem : ns(1); 
        in dataoutDataMem : ns(32); // data from Data memory to CPU
        out waitDataMem : ns(1);
        
        // Sensor interface
        out reqSensor : ns(1);
        out cmdSensor : ns(32); // only cmd is needed to the sensor
        out NotUsed1 : ns(32); // dataport not used
        in ackSensor : ns(1);
        
        in dataRdySensor : ns(1);
        in dataoutSensor : ns(32);
        out waitSensor : ns(1);
        
        // Output interface
        out reqOutput : ns(1);
        out cmdOutput : ns(32);
        out datainOutput : ns(32); // data to output from CPU
        in ackOutput : ns(1);
               
        in dataRdyOutput : ns(1); 
        in dataoutOutput : ns(32); // data from output to CPU
        out waitOutput : ns(1);
        
        // IDs
        in ID_Sensor : ns(4);
        in ID_DataMem : ns(4);
        in ID_Output : ns(4)
		
        ){
        
        $trace(reqDataMem, "traces/reqDataMem.seq");
        $trace(cmdDataMem, "traces/cmdDataMem.seq");
        $trace(datainDataMem, "traces/datainDataMem.seq");
        $trace(ackDataMem, "traces/ackDataMem.seq");
        $trace(dataRdyDataMem, "traces/dataRdyDataMem.seq");
        $trace(dataoutDataMem, "traces/dataoutDataMem.seq");
        $trace(waitDataMem, "traces/waitDataMem.seq");
        
        $trace(reqSensor, "traces/reqSensor.seq");
        $trace(cmdSensor, "traces/cmdSensor.seq");
        $trace(ackSensor, "traces/ackSensor.seq");
        $trace(dataRdySensor, "traces/dataRdySensor.seq");
        $trace(dataoutSensor, "traces/dataoutSensor.seq");
        $trace(waitSensor, "traces/waitSensor.seq");
        
        $trace(reqOutput, "traces/reqOutput.seq");
        $trace(cmdOutput, "traces/cmdOutput.seq");
        $trace(datainOutput, "traces/datainOutput.seq");
        $trace(ackOutput, "traces/ackOutput.seq");
        $trace(dataRdyOutput, "traces/dataRdyOutput.seq");
        $trace(dataoutOutput, "traces/dataoutOutput.seq");
        $trace(waitOutput, "traces/waitOutput.seq");
        
        $trace(reqCPU, "traces/reqCPU.seq");
        $trace(cmdCPU, "traces/cmdCPU.seq");
        $trace(dataoutCPU, "traces/dataoutCPU.seq");
        $trace(ackCPU, "traces/ackCPU.seq");
        $trace(dataRdyCPU, "traces/dataRdyCPU.seq");
        $trace(datainCPU, "traces/datainCPU.seq");
        $trace(waitCPU, "traces/waitCPU.seq");
        
        always{
          ackCPU = (cmdCPU[28:31] == ID_DataMem & ackDataMem) | (cmdCPU[28:31] == ID_Sensor & ackSensor) | (cmdCPU[28:31] == ID_Output & ackOutput); // "OR" all slaves ack signals here
          dataRdyCPU = dataRdyDataMem | dataRdySensor | dataRdyOutput; // Only one slave can access the bus at any one time (only the slave which responds to the cmd)
          
          reqDataMem = reqCPU;
          cmdDataMem = (reqCPU) ? cmdCPU : 0;
          datainDataMem = (reqCPU) ? dataoutCPU : 0;
          
          reqSensor = reqCPU;
          cmdSensor = (reqCPU) ? cmdCPU : 0;
          waitSensor = waitCPU;
          
          reqOutput = reqCPU;
          cmdOutput = (reqCPU) ? cmdCPU : 0;
          datainOutput = (reqCPU) ? dataoutCPU : 0;
          waitOutput = waitCPU;
                    
          datainCPU = (dataRdyDataMem) ? dataoutDataMem : 
                      (dataRdySensor) ? dataoutSensor : 
                      (dataRdyOutput) ? dataoutOutput :
                      0; // arbitrate here when multiple slaves
          waitDataMem = waitCPU;
          
          NotUsed1 = 0;
        }       
}

dp slavebusinterface(
          // Bus ports
          in bus_req : ns(1);
          in bus_cmd : ns(32);
          in bus_datain : ns(32);
          out bus_ack : ns(1);
          
          out bus_rdy : ns(1);
          out bus_dataout : ns(32);
          in bus_wait : ns(1);
          
          // Slave ports - data going in to the slave does not need a handshake. 
          in datain : ns(32); // data from main unit to interface
          in datainrdy : ns(1); // slave signals that data and cmd is rdy
          out dataout : ns(32); // data to slave
          out cmdout : ns(32); // cmd to slave
          out dataoutrdy : ns(1); // signal to slave telling that the data on dataout is rdy
          in targetID : ns(4); // specifies the ID used in the MSB of CMD, which is intended for this slave
          out stallSlave : ns(1) // true if the slaveinterface is currently busy and cannot receive data from the slave
          ){
          
          reg bus_reqr : ns(1);
          reg bus_waitr : ns(1);
          reg datainrdyr : ns(1);
          reg targetIDr : ns(4);
          reg bus_cmdr : ns(32);
          
          always{
             bus_reqr = bus_req;
             bus_waitr = bus_wait;
             datainrdyr = datainrdy;
             targetIDr = targetID;
             bus_cmdr = bus_cmd;
          }
          
          sfg externalData{
             bus_ack = 1;
             dataout = bus_datain;
             cmdout = bus_cmd;
             dataoutrdy = bus_cmd[28:31] == targetID; // is the cmd and data intended for this slave?
             
             bus_rdy = 0;
             bus_dataout = 0;
             stallSlave = 1;
          }
          
          sfg ackExternalData{
             bus_ack = 0;
             dataout = 0;
             cmdout = 0;
             dataoutrdy = 0;
             bus_rdy = 0;
             bus_dataout = 0;
             stallSlave = 1;
          }
          
          sfg internalData{
             bus_dataout = datain;
             bus_rdy = 1;
             
             bus_ack = 0;
             dataout = 0;
             cmdout = 0;
             dataoutrdy = 0;
             stallSlave = 1;
          }
          
          sfg ackInternalData{
             bus_rdy = 0;
             bus_dataout = 0;
             
             bus_ack = 0;
             dataout = 0;
             cmdout = 0;
             dataoutrdy = 0;
             stallSlave = 1;
          }
          
          sfg nothing{
             bus_ack = 0;
             dataout = 0;
             cmdout = 0;
             dataoutrdy = 0;
             bus_rdy = 0;
             bus_dataout = 0;
             stallSlave = 0;
          }
          
}

fsm slavebusinterface_cntrl(slavebusinterface){
   initial s0;
   state s1,s2,s3;
   
   // condition explanation: Only ack if the cmd is intended for this slave
   @s0 if (bus_reqr == 1 & bus_cmdr[28:31] == targetIDr) then (externalData) -> s1;
       else (nothing) -> s0;
   @s1 if (bus_reqr == 0) then (ackExternalData) ->s2;
       else (externalData) -> s1;
   @s2 if (datainrdyr == 1) then (internalData) -> s3;
       else (nothing) -> s2;
   @s3 if (bus_waitr == 1) then (ackInternalData) -> s0;
       else (internalData) -> s3;
   
}

dp slavebusinterface2 : slavebusinterface
dp slavebusinterface3 : slavebusinterface

dp masterbusinterface(
          // Bus ports
          out bus_req : ns(1); // master request the bus
          out bus_cmd : ns(32); // cmd to target unit
          out bus_dataout : ns(32); // data to target unit
          in bus_ack : ns(1); // ack from bus
                      
          in bus_rdy : ns(1); // rdy from bus
          in bus_datain : ns(32); // data targeted for the master
          out bus_wait : ns(1); // wait to bus
                    
          // Master ports - data going in to the master does not need a handshake. 
          in datain : ns(32); // data from main unit to interface
          in cmd : ns(32); // command from main unit to interface
          in datainrdy : ns(1); // master signals that data and cmd is rdy
          out dataout : ns(32); // data to master
          out dataoutrdy : ns(1) // signal to master telling that the data on dataout is rdy
          ){
          
//          $trace(bus_req, "traces/M_bus_req.seq");
//          $trace(bus_cmd, "traces/M_bus_cmd.seq");
//          $trace(bus_dataout, "traces/M_bus_dataout.seq");
//          $trace(bus_ack, "traces/M_bus_ack.seq");
//          $trace(bus_rdy, "traces/M_bus_rdy.seq");
//          $trace(bus_datain, "traces/M_bus_datain.seq");
//          $trace(bus_wait, "traces/M_bus_wait.seq");
          
//          $trace(datain, "traces/M_datain_int.seq");
//          $trace(cmd, "traces/M_cmd_int.seq");
//          $trace(datainrdy, "traces/M_datainrdy_int.seq");
//          $trace(dataout, "traces/M_dataout_int.seq");
//          $trace(dataoutrdy, "traces/M_dataoutrdy_int.seq");
          
          reg bus_ackr : ns(1);
          reg bus_rdyr : ns(1);
          reg datainrdyr : ns(1);
          reg cmdr : ns(32);
          reg datainr : ns(32);
                      
          always{
             bus_ackr = bus_ack;
             bus_rdyr = bus_rdy;
             datainrdyr = datainrdy;
             cmdr = cmd;
             datainr = datain;
          }
          
          sfg internalData{
             bus_req = 1;
             bus_cmd = cmd;
             bus_dataout = datain;
             
             bus_wait = 0;
             dataout = 0;
             dataoutrdy = 0;
          }
          
          sfg ackInternalData{
             bus_req = 0;
             bus_cmd = cmdr;
             bus_dataout = datainr;
             
             bus_wait = 0;
             dataout = 0;
             dataoutrdy = 0;
          }
          
          sfg externalData{
             bus_wait = 1;
             dataout = bus_datain;
             dataoutrdy = 1;
             
             bus_req = 0;
             bus_cmd = 0;
             bus_dataout = 0;
          }
          
          sfg ackExternalData{
              bus_wait = 0;
              dataout = 0;
              dataoutrdy = 0;
              
              bus_req = 0;
              bus_cmd = 0;
              bus_dataout = 0;
          }
                    
          sfg nothing{
             bus_req = 0;
             bus_cmd = cmdr;
             bus_dataout = datainr;
             
             bus_wait = 0;
             dataout = 0;
             dataoutrdy = 0;
          }
}

fsm masterbusinterface_cntrl(masterbusinterface){
   initial s0;
   state s1,s2,s3,s4;
   
   @s0 if (datainrdyr == 1) then (internalData) -> s1;
       else (nothing) -> s0; // do nothing
   @s1 if (bus_ackr == 1) then (ackInternalData) -> s3; // go to s3 in order to make sure the bus will not initiate a new communication due to the fact that the CPU is stalled at this particular bus-using instruction
       else (internalData) -> s1; // do nothing
   @s3 if (bus_rdyr == 1) then (externalData) -> s2;
       else (nothing) -> s3;
   @s2 (ackExternalData) -> s4; 
   @s4 (nothing) -> s0; // Wait one more cycle to synchronize with PC
}

dp bus_toplevel(
           // Master interface
           in M_datain : ns(32);
           in M_cmd : ns(32);
           in M_datainrdy : ns(1);
           out M_dataout : ns(32);
           out M_dataoutrdy : ns(1);
           //out stall_cpu : ns(1);
           
           // Slave interface (datamemory)
           in DM_datain : ns(32);
           in DM_datainrdy : ns(1);
           out DM_dataout : ns(32);
           out DM_cmdout : ns(32);
           out DM_dataoutrdy : ns(1);
           out DM_stall : ns(1);
           
           // Slave interface (Sensor)
           in SS_datain : ns(32);
           in SS_datainrdy : ns(1);
           out SS_dataout : ns(32); // data port not used in sensor
           out SS_cmdout : ns(32);
           out SS_dataoutrdy : ns(1);
           out SS_stall : ns(1);
           
           // Slave interface (output)
           in OP_datain : ns(32);
           in OP_datainrdy : ns(1);
           out OP_dataout : ns(32); // data port not used in sensor
           out OP_cmdout : ns(32);
           out OP_dataoutrdy : ns(1);
           out OP_stall : ns(1)
           ){
           
           sig reqCPU,reqDataMem,reqSensor,reqOutput,ackCPU,ackDataMem,ackSensor,ackOutput,dataRdyCPU,dataRdyDataMem,dataRdySensor,dataRdyOutput,waitCPU,waitDataMem,waitSensor,waitOutput: ns(1);
           sig cmdCPU,cmdDataMem,cmdSensor,cmdOutput,dataoutCPU,datainDataMem,datainSensor,datainOutput,datainCPU,dataoutDataMem,dataoutSensor,dataoutOutput : ns(32);
           reg ID_DataMem : ns(4);
           reg ID_Sensor : ns(4);
           reg ID_Output : ns(4);
           
           $trace(DM_datain, "traces/DM_datain.seq");
           $trace(DM_datainrdy, "traces/DM_datainrdy.seq");
           $trace(DM_dataout, "traces/DM_dataout.seq");
           $trace(DM_cmdout, "traces/DM_cmdout.seq");
           $trace(DM_dataoutrdy, "traces/DM_dataoutrdy.seq");
           
           $trace(SS_datain, "traces/SS_datain.seq");
           $trace(SS_datainrdy, "traces/SS_datainrdy.seq");
           $trace(SS_dataout, "traces/SS_dataout.seq");
           $trace(SS_cmdout, "traces/SS_cmdout.seq");
           $trace(SS_dataoutrdy, "traces/SS_dataoutrdy.seq");
           
           $trace(OP_datain, "traces/OP_datain.seq");
           $trace(OP_datainrdy, "traces/OP_datainrdy.seq");
           $trace(OP_dataout, "traces/OP_dataout.seq");
           $trace(OP_cmdout, "traces/OP_cmdout.seq");
           $trace(OP_dataoutrdy, "traces/OP_dataoutrdy.seq");
           
           use bus(reqCPU,cmdCPU,dataoutCPU,ackCPU,dataRdyCPU,datainCPU,waitCPU, // master
                   reqDataMem,cmdDataMem,datainDataMem,ackDataMem,dataRdyDataMem,dataoutDataMem,waitDataMem, // Data memory (slave)
                   reqSensor,cmdSensor,datainSensor,ackSensor,dataRdySensor,dataoutSensor,waitSensor,
                   reqOutput,cmdOutput,datainOutput,ackOutput,dataRdyOutput,dataoutOutput,waitOutput,// Sensor (slave)
                   ID_Sensor,ID_DataMem,ID_Output); 
           
           use masterbusinterface(reqCPU,cmdCPU,dataoutCPU,ackCPU,dataRdyCPU,datainCPU,waitCPU, // Bus interface
                                  //CPUdatain,CPUcmd,CPUdatainrdy,CPUdataout,CPUdataoutrdy
                                  M_datain,M_cmd,M_datainrdy,M_dataout,M_dataoutrdy);

           use slavebusinterface(reqDataMem,cmdDataMem,datainDataMem,ackDataMem,dataRdyDataMem,dataoutDataMem,waitDataMem, // Bus interface (data memory)
                             //DMDatain,DMDatainrdy,DMDataout,DMCmdout,DMDataoutrdy,
                             DM_datain,DM_datainrdy,DM_dataout,DM_cmdout,DM_dataoutrdy,ID_DataMem,DM_stall);
                             
           use slavebusinterface2(reqSensor,cmdSensor,datainSensor,ackSensor,dataRdySensor,dataoutSensor,waitSensor, // Bus interface (Sensor)
                              //SensorDatain,SensorDatainrdy,NotUsed2,SensorCmdout,SensorDataoutrdy,
                              SS_datain,SS_datainrdy,SS_dataout,SS_cmdout,SS_dataoutrdy,ID_Sensor,SS_stall);
                              
           use slavebusinterface3(reqOutput,cmdOutput,datainOutput,ackOutput,dataRdyOutput,dataoutOutput,waitOutput, // Bus interface (data memory)
                              //OPDatain,OPDatainrdy,OPDataout,OPCmdout,OPDataoutrdy,
                              OP_datain,OP_datainrdy,OP_dataout,OP_cmdout,OP_dataoutrdy,ID_Output,OP_stall);
           
           always{
              ID_Sensor = 0x1;
              ID_DataMem = 0x2;
              ID_Output = 0x3;
           }
}

////////////////////////////
// Auxiliary units
////////////////////////////
ipblock datamem(in address : ns(12);
          in wr,rd   : ns(1);
          in idata   : ns(32);
          out odata : ns(32)){

  iptype "ram";
  ipparm "size=4096";
  ipparm "wl=32";
  ipparm "file=datamemory.txt"; // initializes content. File syntax needs to be "addr data "* (the last space can also be a linebreak. NB! Should the students do a manual loading of the RAM to simulate a "real" system or is it ok if they just use this parameter?
  //ipparm "file=sddb48hex2.ecg"; 
}

dp DataMem(
   in datain : ns(32);
   in cmd : ns(32);
   in datainrdy : ns(1);
   out dataout : ns(32);
   out dataoutrdy : ns(1);
   in stall : ns(1) // true if the slave is currently busy (with handshaking) and cannot receive new data.
   ){
   
   sig wr,rd : ns(1);
   sig address : ns(12);
   sig idata : ns(32);
   
   reg datainrdyr : ns(1);
   reg cmdr : ns(32);
   reg datainr : ns(32);
   reg dataoutr : ns(32);
   reg stallr : ns(1);
   
   use datamem(address,wr,rd,idata,dataout);
   
   $trace(address, "traces/DM_address.seq");
   $trace(wr, "traces/DM_wr.seq");
   $trace(rd, "traces/DM_rd.seq");
   $trace(idata, "traces/DM_idata.seq");
   
   always{
       stallr = stall;
       rd = cmdr[27] == 0;
       wr = cmdr[27] == 1;
       address = (cmdr[27] == 0) ? datainr : 0b00000 # cmdr[0:26]; // if Store Word instruction, use cmd[0:26] as address. If Load Word instruction use datain as address
       idata = (cmdr[27] == 0) ? 0 : datainr; // if store word use datain as data to be stored, if load word, just set idata to 0
       //$display($dec, "Cycle: ", $cycle);
   	   //$display($dec, "   address: ", address);
   }
   
   sfg captureData{
       dataoutrdy = 0; 
       datainrdyr = datainrdy;
       datainr = datain;
       cmdr = cmd;
   }
   
   sfg awaithandshake{
      dataoutrdy = 0;
   }
   
   sfg resetAndSignalRdy{
     dataoutrdy = 1;
     datainrdyr = 0;
   }
   
   sfg nothing{
       dataoutrdy = 0; 
   }
   
}

fsm DataMem_cntrl(DataMem){
   initial s0;
   state s1;
   
   @s0 if (datainrdyr == 1 & stallr == 0) then (resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 1) then (nothing) -> s1;
       else (captureData) -> s0;
   @s1 if (stallr == 0) then (resetAndSignalRdy) -> s0;
       else (awaithandshake) -> s1;
       
}

ipblock sensordata(in address : ns(5);
          in wr,rd   : ns(1);
          in idata   : ns(32);
          out odata : ns(32)){

  iptype "ram";
  ipparm "size=32";
  ipparm "wl=32";
  ipparm "file=sddb48hex.ecg"; // initializes content
  
}

dp Sensor(
   in datain : ns(32);
   in cmd : ns(32);
   in datainrdy : ns(1);
   out dataout : ns(32);
   out dataoutrdy : ns(1);
   in stall : ns(1) // true if the slave is currently busy (with handshaking) and cannot receive new data.
   ){
   
    sig address : ns(5);
    sig wr,rd : ns(1);
    sig idata,odata : ns(32);
    
    use sensordata(address,wr,rd,idata,odata);

   	reg c : ns(10);
   	reg reset : ns(1);
   	reg addr : ns(8);
   	reg LIMIT : ns(10); // How many cycles to wait before it "acquires" the next datapoint (simulated sampling rate)
   	reg stallr : ns(1);
   	reg datainrdyr : ns(1);
   	
   	$trace(odata, "traces/SS_data.seq");
   	$trace(c, "traces/SS_c.seq");
   	
   	always{
   		wr = 0;
   		idata = 0;
   		LIMIT = 9; // 0 means 1 cycles => Pick new point each cycle TODO: Set proper sampling rate
   		address = addr;
   		
   		dataout = odata;
   		//dataoutrdy = 0;
   		stallr = stall;
   		//$display($dec, "Cycle: ", $cycle);
   		//$display($dec, "   data: ", odata);
   		//$display($dec, "   address: ", address);
   	}
   	
   sfg captureData{  
       dataoutrdy = 0; 
       datainrdyr = datainrdy;
       // Removed all datain and cmd capturing registers, due to the fact that the sensor only has one function, which is to send data once requested
   }
   
   sfg awaithandshake{
      dataoutrdy = 0;
   }
   
   sfg resetAndSignalRdy{
     dataoutrdy = 1;
     datainrdyr = 0;
   }
   
   sfg nothing{
       dataoutrdy = 0; 
   }

	sfg count{
    	c = c + 1;
    	rd = 0;
	}
   	
   	sfg addressUpdate{
   	   addr = addr + 1;
   	   rd = 1;
   	   c = 0;
   	}

}

fsm sensor_cntrl(Sensor){
   initial s0;
   state s1;
       
   @s0 if (datainrdyr == 1 & stallr == 0 & c == LIMIT) then (addressUpdate,resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 0 &  c != LIMIT) then (count,resetAndSignalRdy) -> s0;
       else if (datainrdyr == 1 & stallr == 1 & c == LIMIT) then (addressUpdate,nothing) -> s1;
       else if (datainrdyr == 1 & stallr == 1 & c != LIMIT) then (count,nothing) -> s1;
       else if (datainrdyr == 0 & c == LIMIT) then (addressUpdate,captureData) -> s0;
       else (count,captureData) -> s0;
   @s1 if (stallr == 0 & c == LIMIT) then (addressUpdate,resetAndSignalRdy) -> s0;
       else if (stallr == 0 & c != LIMIT) then (count,resetAndSignalRdy) -> s0;
       else if (stallr == 1 & c == LIMIT) then (addressUpdate,awaithandshake) -> s1;
       else (count,awaithandshake) -> s1;
}

dp Output(
   in datain : ns(32);
   in cmd : ns(32);
   in datainrdy : ns(1);
   out dataout : ns(32);
   out dataoutrdy : ns(1);
   in stall : ns(1); // true if the slave is currently busy (with handshaking) and cannot receive new data.
   out FilterOut : tc(32)
   ){
   
   reg datainrdyr : ns(1);
   reg cmdr : ns(32);
   reg datainr : ns(32);
   reg dataoutr : ns(32);
   reg stallr : ns(1);
   reg count : ns(10);
   reg FilterOut_r : tc(32);
   
   $trace(FilterOut, "traces/FilterOut.seq");
   $trace(count, "traces/out_count.seq");
   
   always{
       stallr = stall;
       dataout = 0x123;
   }
   
   sfg captureData{
       dataoutrdy = 0; 
       datainrdyr = datainrdy;
       datainr = datain;
       cmdr = cmd;
       
       FilterOut = FilterOut_r;
   }
   
   sfg awaithandshake{
      dataoutrdy = 0;
      
      FilterOut = FilterOut_r;
   }
   
   sfg resetAndSignalRdy{
     dataoutrdy = 1;
     datainrdyr = 0;
   }
   
   sfg nothing{
       dataoutrdy = 0;
       
       FilterOut = FilterOut_r;
   }
   
   sfg setFilterOut{
      FilterOut = datainr;
      FilterOut_r = datainr;
      count = count + 1;
   }
   
}

fsm Output_cntrl(Output){
   initial s0;
   state s1;
   
   @s0 if (datainrdyr == 1 & stallr == 0) then (resetAndSignalRdy,setFilterOut) -> s0;
       else if (datainrdyr == 1 & stallr == 1) then (nothing) -> s1;
       else (captureData) -> s0;
   @s1 if (stallr == 0) then (resetAndSignalRdy,setFilterOut) -> s0;
       else (awaithandshake) -> s1;
       
}

////////////////////////////
// System connections
////////////////////////////
system CPUsystem{

   CPU(CPUdatain,CPUcmd,CPUdatainrdy,CPUdataout,CPUdataoutrdy);
   
   bus_toplevel(CPUdatain,CPUcmd,CPUdatainrdy,CPUdataout,CPUdataoutrdy, // master unit
           DMDatain,DMDatainrdy,DMDataout,DMCmdout,DMDataoutrdy,DMStall, // slave (data memory)
           SensorDatain,SensorDatainrdy,SensorDataout,SensorCmdout,SensorDataoutrdy,SensorStall,  // slave (sensor)
           OPDatain,OPDatainrdy,OPDataout,OPCmdout,OPDataoutrdy,OPStall); // slave (Output)
           
   DataMem(DMDataout,DMCmdout,DMDataoutrdy,DMDatain,DMDatainrdy,DMStall); // Data Memory Unit
   Sensor(SensorDataout,SensorCmdout,SensorDataoutrdy,SensorDatain,SensorDatainrdy,SensorStall);
   Output(OPDataout,OPCmdout,OPDataoutrdy,OPDatain,OPDatainrdy,OPStall,FilterOut);
}